{"version":3,"sources":["webpack:///./src/gameSolver.js","webpack:///./src/gameGenerator.js","webpack:///./src/script.js"],"names":["isSafe","board","row","col","num","d","length","r","sqrt","Math","floor","boxRowStart","boxColStart","solveSudoku","n","isEmpty","i","j","grid","random3x3","arr","res","rmIndex","getRandomInt","push","splice","max","random","difficulty","Array","fill","square1","square2","square3","count","solver","puzzle","numRm","forEach","concat","puzzle1","numToRemove","puzzle0","slice","toString","removeOutOf81","replace","console","log","timer","timeRemaining","lives","selectedNum","selectedTile","disableSelect","id","document","getElementById","solution","startGame","checked","gameGenerator","textContent","tiles","qsa","remove","clearTimeout","children","classList","clearPrevious","idCount","tile","createElement","charAt","add","addEventListener","contains","updateMove","appendChild","generateBoard","timeConversion","setInterval","endGame","qs","time","min","sec","reallyDone","checkDone","setTimeout","selector","querySelector","querySelectorAll","window","onload","this"],"mappings":"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","file":"bundle.8174223c652ec108262d.js","sourcesContent":["\r\nfunction isSafe(board, row, col, num) {\r\n\r\n    // Row has the unique (row-clash)\r\n    for (let d = 0; d < board.length; d++) {\r\n\r\n        // Check if the number we are trying to\r\n        // place is already present in\r\n        // that row, return false;\r\n        if (board[row][d] == num) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Column has the unique numbers (column-clash)\r\n    for (let r = 0; r < board.length; r++) {\r\n\r\n        // Check if the number\r\n        // we are trying to\r\n        // place is already present in\r\n        // that column, return false;\r\n        if (board[r][col] == num) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Corresponding square has\r\n    // unique number (box-clash)\r\n    let sqrt = Math.floor(Math.sqrt(board.length));\r\n    let boxRowStart = row - row % sqrt;\r\n    let boxColStart = col - col % sqrt;\r\n\r\n    for (let r = boxRowStart;\r\n        r < boxRowStart + sqrt; r++) {\r\n        for (let d = boxColStart;\r\n            d < boxColStart + sqrt; d++) {\r\n            if (board[r][d] == num) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // If there is no clash, it's safe\r\n    return true;\r\n}\r\n\r\nfunction solveSudoku(board, n) {\r\n    let row = -1;\r\n    let col = -1;\r\n    let isEmpty = true;\r\n    for (let i = 0; i < n; i++) {\r\n        for (let j = 0; j < n; j++) {\r\n            if (board[i][j] == '-') {\r\n                row = i;\r\n                col = j;\r\n\r\n                // We still have some remaining\r\n                // missing values in Sudoku\r\n                isEmpty = false;\r\n                break;\r\n            }\r\n        }\r\n        if (!isEmpty) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    // No empty space left\r\n    if (isEmpty) {\r\n        return true;\r\n    }\r\n\r\n    // Else for each-row backtrack\r\n    for (let num = 1; num <= n; num++) {\r\n        if (isSafe(board, row, col, num)) {\r\n            board[row][col] = num;\r\n            if (solveSudoku(board, n)) {\r\n\r\n                // print(board, n);\r\n                return true;\r\n            }\r\n            else {\r\n\r\n                // Replace it\r\n                board[row][col] = '-';\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction solver(grid) {\r\n    return solveSudoku(grid, 9);\r\n}\r\n\r\nexport default solver;","import solver from './gameSolver.js';\r\n\r\n\r\n\r\n\r\nfunction gameGenerator(difficulty) {\r\n    //if difficulty is easy 30 clues are included, medium 25, hard 20.\r\n    let grid = new Array(9);\r\n    for (let i = 0; i < 9; i++) {\r\n        grid[i] = new Array(9);\r\n        grid[i].fill('-');\r\n    }\r\n    let square1 = random3x3(); let square2 = random3x3();let square3 = random3x3();\r\n    let count=0;\r\n    for (let i=0;i<3;i++)\r\n    {\r\n        for (let j=0;j<3;j++)\r\n        {\r\n            grid[i][j] = square1[count];\r\n            grid[i+3][j+3] =square2[count];\r\n            grid[i+6][j+6] = square3[count++];\r\n        }\r\n    }\r\n    solver(grid); //remember to return a string of tile with 81 numbers inside\r\n    const puzzle= new Array;\r\n    \r\n    puzzle[1] = [];\r\n    grid.forEach(row => {\r\n        puzzle[1] = puzzle[1].concat(row); //concat a full row of the solved grid into the puzzle.\r\n    })\r\n    let numRm;\r\n    switch (difficulty){\r\n        case('easy'): numRm = 81-35;\r\n        case('medium'): numRm = 81-30;\r\n        case('hard'): numRm=81-25;\r\n    }\r\n    puzzle[0] = removeOutOf81(puzzle[1], numRm).replace(/\\,/g,'');\r\n    puzzle[1] = puzzle[1].toString().replace(/\\,/g,'');//solution\r\n    console.log(puzzle);\r\n    return puzzle;\r\n}\r\nfunction removeOutOf81(puzzle1, numToRemove) {//modify grid by removing randomly numToRemove tiles\r\n    let arr = [];\r\n    // console.log(puzzle1);\r\n    let puzzle0 = puzzle1.slice(); //clone not modify\r\n    for(let i=0;i<81;i++) arr[i] = i;\r\n    for (let i=81;i>numToRemove;i--){\r\n        //return a number from 0 to i-1\r\n        let rmIndex = getRandomInt(i);\r\n        puzzle0.splice(arr[rmIndex],1,'-');\r\n        arr.splice(rmIndex, 1);\r\n    }\r\n    puzzle0 = puzzle0.toString();\r\n    return puzzle0;\r\n}\r\nfunction random3x3() {\r\n    let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n    let res =[];\r\n    for (let i=9;i>0;i--){\r\n        let rmIndex = getRandomInt(i);//from 0 to i-1\r\n        res.push(arr[rmIndex]);\r\n        arr.splice(rmIndex, 1);\r\n    }\r\n    return res;\r\n}\r\nfunction getRandomInt(max) {//return a random number from zero to max-1\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\n\r\n\r\nexport default gameGenerator;","import gameGenerator from \"./gameGenerator\";\nimport './style.css';\nvar timer;\nvar timeRemaining;\nvar lives;\nvar selectedNum;\nvar selectedTile;\nvar disableSelect;\n\n\nwindow.onload = function () {\n    id(\"start-btn\").addEventListener(\"mousedown\", startGame);\n    for (let i = 0; i < 9; i++) {\n        id(\"number-container\").children[i].addEventListener(\"click\", function () {\n            if (!disableSelect) {\n                if (this.classList.contains(\"selected\")) {\n                    this.classList.remove(\"selected\");\n                    selectedNum = null;\n                }\n                else {\n                    for (let j = 0; j < 9; j++) {//search and remove the previously selected tile\n                        id(\"number-container\").children[j].classList.remove(\"selected\");\n                    }\n                    this.classList.add(\"selected\");\n                    selectedNum = this;\n                    updateMove();\n                }\n\n            }\n        });\n    }\n}\n\nfunction id(id) {\n    return document.getElementById(id);\n}\nlet board, solution;\nfunction startGame() {\n    //choose difficulty\n    if (id(\"diff-1\").checked) {\n        [board, solution] = gameGenerator('easy')\n    }\n    else if (id(\"diff-2\").checked) [board, solution] = gameGenerator('medium')\n    else[board, solution] = gameGenerator('hard');\n\n\n\n    lives = 3;\n    disableSelect = false;\n    id(\"live\").textContent = \"Lives Remaining: 3\";\n    generateBoard(board);\n    startTimer();\n    if (id(\"theme-1\").checked) {\n        qs(\"body\").classList.remove(\"dark\");\n    } else {\n        qs(\"body\").classList.add(\"dark\");\n    }\n    id(\"number-container\").classList.remove(\"hidden\");\n}\nfunction startTimer() {\n    if (id(\"time-1\").checked) timeRemaining = 180;\n    else if (id(\"time-2\").checked) timeRemaining = 300;\n    else timeRemaining = 600;\n    id(\"timer\").textContent = timeConversion(timeRemaining);\n    timer = setInterval(function () {\n        timeRemaining--;\n        if (timeRemaining == 0) endGame();\n        id(\"timer\").textContent = timeConversion(timeRemaining)\n    }, 1000)\n}\n\nfunction timeConversion(time) {\n    //MM:SS format\n    let min = Math.floor(time / 60);\n    if (min < 10) min = \"0\" + min;\n    let sec = time % 60;\n    if (sec < 10) sec = \"0\" + sec;\n    return min + ':' + sec;\n}\n\nfunction generateBoard(board) {\n    clearPrevious();\n    let idCount = 0;\n    //81 tiles created\n    for (let i = 0; i < 81; i++) {\n        let tile = document.createElement(\"p\");\n\n        if (board.charAt(i) != \"-\") {\n            tile.textContent = board.charAt(i);\n            tile.classList.add(\"given\")\n        }\n        else {\n            tile.addEventListener(\"click\", () => {\n                if (!disableSelect) { //if some shit is chosen\n                    if (tile.classList.contains(\"selected\")) {\n                        tile.classList.remove(\"selected\");\n                        selectedTile = null;\n\n                    } else { //remove all\n                        for (i = 0; i < 81; i++) {\n                            qsa(\".tile\")[i].classList.remove(\"selected\");\n\n                        }\n                        tile.classList.add(\"selected\");\n                        selectedTile = tile;\n                        updateMove();\n                    }\n\n                }\n            })\n        }\n        tile.id = idCount;\n        idCount++;\n        tile.classList.add(\"tile\");\n        if ((tile.id > 17 && tile.id < 27) || (tile.id > 44 && tile.id < 54)) {\n            tile.classList.add(\"bottomBorder\");\n        }\n        if ((tile.id + 1) % 9 == 3 || (tile.id + 1) % 9 == 6) {\n            tile.classList.add(\"rightBorder\");\n        }\n        id(\"board\").appendChild(tile);\n    }\n    console.log(\"new board created\")\n}\n\nfunction updateMove() {\n    if (selectedTile && selectedNum) {\n        //set the tile to the correct number\n        selectedTile.textContent = selectedNum.textContent;\n        if (checkCorrect(selectedTile)) {\n            //deselect the tile\n            selectedTile.classList.remove(\"selected\");\n            selectedNum.classList.remove(\"selected\");\n            selectedNum = null;\n            selectedTile = null; //selected tile is true, reset selected and await for the next click\n            if (checkDone()) {\n                console.log('really');\n                endGame();\n            }\n        } else {//if guess is wrong\n            disableSelect = true;\n            selectedTile.classList.add(\"incorrect\");\n            setTimeout(function () {\n                lives--;\n                if (lives === 0) endGame();\n                else {\n                    id(\"live\").textContent = \"Lives Remaining: \" + lives;\n                    disableSelect = false;\n                }\n                selectedTile.classList.remove(\"incorrect\");\n                selectedTile.classList.remove(\"selected\");\n                selectedNum.classList.remove(\"selected\");\n                selectedTile.textContent = \"\";\n                selectedNum = null;\n                selectedTile = null;\n\n\n            }, 1000)\n        }\n    }\n\n}\nfunction checkDone() {\n    let tiles = qsa(\".tile\");\n    let reallyDone = true;\n    tiles.forEach(tile => {\n        if (tile.textContent === '' || tile.textContent === null)\n        {\n            reallyDone=false;\n        }\n    })\n    return reallyDone;\n}\nfunction endGame() {\n    disableSelect = true;\n    clearTimeout(timer);\n    if (lives === 0 || timeRemaining === 0) {\n        id(\"live\").textContent = \"Wasted!\";\n    } else {\n        id(\"live\").textContent = \"Victory!\";\n    }\n}\n\nfunction checkCorrect(tile) {\n    if (solution.charAt(tile.id) === tile.textContent)\n        return true;\n    return false;\n}\nfunction clearPrevious() {\n    console.log(\"clear previous\");\n    let tiles = qsa(\".tile\");\n    for (let i = 0; i < tiles.length; i++) {\n        tiles[i].remove();\n    }\n    if (timer) clearTimeout(timer);\n    for (let i = 0; i < id(\"number-container\").children.length; i++) {\n        id(\"number-container\").children[i].classList.remove(\"selected\")\n    }\n    selectedTile = null;\n    selectedNum = null;\n}\nfunction qs(selector) {\n    return document.querySelector(selector);\n}\nfunction qsa(selector) {\n    return document.querySelectorAll(selector);\n}\n"],"sourceRoot":""}